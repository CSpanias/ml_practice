from pandas import read_csv, DataFrame
from numpy.random import seed
from sklearn.preprocessing import minmax_scale
from sklearn.model_selection import train_test_split
from keras.layers import Input, Dense
from keras.models import Model
from sklearn.tree import DecisionTreeClassifier
import warnings
warnings.filterwarnings("ignore")

df = read_csv('../input/wiscosin-target-1csv/wiscosin_target (1).csv')
df=df.fillna(0)
X=df.drop(columns='target').values
Y=df['target'].values
ncol = X.shape[1]

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.5, random_state = seed(2017))
print(X_test.shape)

classifier = DecisionTreeClassifier()
classifier.fit(X_train, Y_train)
y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

cm = confusion_matrix(Y_test, y_pred)
print(cm)
print('Accuracy: ' + str(accuracy_score(Y_test, y_pred)))

input_dim = Input(shape = (ncol, ))
# DEFINE THE DIMENSION OF ENCODER ASSUMED 3
encoding_dim = 10
# DEFINE THE ENCODER LAYER
encoded = Dense(encoding_dim, activation = 'relu')(input_dim)
# DEFINE THE DECODER LAYER
decoded = Dense(ncol, activation = 'sigmoid')(encoded)
# COMBINE ENCODER AND DECODER INTO AN AUTOENCODER MODEL
autoencoder = Model(input_dim,decoded)
# CONFIGURE AND TRAIN THE AUTOENCODER
autoencoder.compile(optimizer = 'adadelta', loss = 'binary_crossentropy')
autoencoder.fit(X_train, X_train, epochs = 50, batch_size = 100, shuffle = True, validation_data = (X_test, X_test))

encoder = Model(input_dim,encoded)
encoded_input = Input(shape = (encoding_dim, ))
encoded_out = encoder.predict(X_test)
encoded_out.shape

X_train, X_test, Y_train, Y_test = train_test_split(encoded_out, Y_test, test_size = 0.5, random_state = seed(2017))
classifier.fit(X_train, Y_train)
y_pred = classifier.predict(X_test)
cm = confusion_matrix(Y_test, y_pred)
print(cm)
print('Accuracy: ' + str(accuracy_score(Y_test, y_pred)))
